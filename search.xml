<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>找出二进制数1的个数</title>
      <link href="/2019/11/08/%E6%89%BE%E5%87%BA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B01%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>/2019/11/08/%E6%89%BE%E5%87%BA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B01%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>​    输入一个十进制数,求该十进制数转换为2进制数后,1的个数有多少?</p><h2 id="求解过程"><a href="#求解过程" class="headerlink" title="求解过程"></a>求解过程</h2><p>​    这题是很典型的位运算题,其实本质上是另一道题”求一个二进制数某位上是否为1”的演化,我这道题典型的思路就是利用移位操作和与运算的性质进行求解.</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>​    有三种思路,这里罗列出来:</p><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>​    假设该数是一个int类型的,我们就可以用1从i(i从0开始)位开始,逐位左移,一直到32位为止,每左移一次和题中给出的数进行与运算,若题中第i位数为0,则与运算结果应该为0,反之与运算结果应该与左移<strong>i</strong>位后的1相同:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入你想统计的数的十进制形式:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">auto</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> ((num&amp;(<span class="number">1</span> &lt;&lt; i)) == (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/08/U5H6KeRaci1MFEk.jpg" alt="批注 2019-11-08 214319.jpg"></p><a id="more"></a><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>​    与思路1大致相同,只不过将给定的数逐次向右移动<strong>i</strong>位然后与1与运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入十进制数:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">auto</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (((num &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="终极思路"><a href="#终极思路" class="headerlink" title="终极思路"></a>终极思路</h3><p>​    给定一个数N,这个方法大致的思路就是不断地做N与(N-1)的与运算,结果为N的新值,直到N的新值为0为止,我们可以仔细想想,N与N-1进行与操作其实就是消去N最低位的1的过程,这样的操作做几次,N就有几个1:</p><p>​    <img src="https://i.loli.net/2019/11/09/FBuXeydQkahAlUp.jpg" alt="批注 2019-11-09 174125.jpg"></p><h4 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入十进制数:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">num = num &amp; (num - <span class="number">1</span>);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>​    当然这只是位运算的一小部分应用,很多内容还需要更多地去学习,比如思路2中的算法,如果是给的数为负数的话,估计c++就得考虑另一种方法了,因为带有符号位的话原来的逻辑就行不通了(java有&gt;&gt;&gt;逻辑右移233</p>]]></content>
      
      
      <categories>
          
          <category> 算法设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 与运算 </tag>
            
            <tag> 奇技淫巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找出唯一成对的数</title>
      <link href="/2019/11/08/%E6%89%BE%E5%87%BA%E5%94%AF%E4%B8%80%E6%88%90%E5%AF%B9%E7%9A%84%E6%95%B0/"/>
      <url>/2019/11/08/%E6%89%BE%E5%87%BA%E5%94%AF%E4%B8%80%E6%88%90%E5%AF%B9%E7%9A%84%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>​    1—1000这1000个数放在大小为1001的数组中，只有唯一的一个元素值重复，其他均只出现一次。每个数组元素只能访问一次，设计一个算法，将这个重复的元素找出来。不用辅助存储空间，能否设计一个算法实现？</p><h2 id="求解过程"><a href="#求解过程" class="headerlink" title="求解过程"></a>求解过程</h2><p>​    很自然地想到穷举法,嵌套循环就能很轻易地找出来,但显然O(n<sup>2</sup>)并不是最优解.有没有一种方法可以优化时间复杂度呢?答案当然是有的.</p><p>​    我们知道异或运算a^b=1,仅当a=b,所以利用异或运算就能轻易消去重复的数,但是根据题目描述,只有一对数重复,直接异或肯定是行不通的.所以,我们需要让凑出这样一个值,使得除了重复数k之外的所有数都成对,重复数k有3个:</p><p>​        (1^2^…^k^…^k^…^1000)^(1^2^…^k^…^1000)=k</p><a id="more"></a><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>​    利用异或的特性,实现代码就容易多了:</p><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) (rand()%(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//构造题干中的数组</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> size = <span class="number">1001</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; v.size() - <span class="number">1</span>; ++i)</span><br><span class="line">v[i] = i + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">srand(time(<span class="literal">nullptr</span>));</span><br><span class="line">v[size - <span class="number">1</span>] = random(<span class="number">11</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> index = random(<span class="number">11</span>);</span><br><span class="line">swap(v[index], v[v.size()<span class="number">-1</span>]);</span><br><span class="line">    <span class="comment">//打印该数组,方便查看</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp;x : v)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//寻找成对的数的过程</span></span><br><span class="line"><span class="keyword">auto</span> opr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">1</span>; i &lt;= v.size()<span class="number">-1</span>; ++i)</span><br><span class="line">opr = opr ^ i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v)</span><br><span class="line">opr = opr ^ i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; opr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>​    当然,这道题的限制十分明显,即数的范围已经确定,而其中只存在一个重复的数,我们可以利用数组求和,再减去1-1000的和,即可求出重复的数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,s1=<span class="number">0</span>,s2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">11</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> size=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);<span class="comment">//size=11</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">        s1=s1+a[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;size<span class="number">-1</span>;i++)</span><br><span class="line">        s2=s2+i;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s1-s2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>​    当然,如果数的范围不确定,上面的思路全都行不通了,若可以使用辅助空间,我们可以申请n个额外空间,存放题干数组中每个值出现的个数,然后遍历题干中数组:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v为思路1中的数组</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; helper(size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; helper.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">helper[v[i]]++;</span><br><span class="line"><span class="keyword">if</span> (helper[v[i]]==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引申-求出落单的元素"><a href="#引申-求出落单的元素" class="headerlink" title="引申:求出落单的元素"></a>引申:求出落单的元素</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    一个数组里除了某一个数字外,其他的数字都出现了两次。请写程序找出这个只出现一次的数字。</p><h3 id="求解过程-1"><a href="#求解过程-1" class="headerlink" title="求解过程"></a>求解过程</h3><p>​    这个题目就很简单了,直接利用异或消去重复数即可:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123; <span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">auto</span> apr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v)</span><br><span class="line">apr ^= i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; apr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算奇技淫巧 </tag>
            
            <tag> 异或 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2019/11/02/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/11/02/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    最近在看陈越姥姥的数据结构，学习到并查集这个数据结构，大二上课的时候老师讲到这块直接跳过了(说考试不考，因为平时了解一些ACM或者算法题都有对并查集的考察，所以这次打算好好学习一下(笑)</p><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>​    并查集，主要解决不相交集合的并操作，查询某两个元素是否处于同一集合。有一部分数学问题其实都可以抽象为对并查集的一系列操作。</p><p>​    比如比较经典的电脑连通问题：</p><blockquote><p>给定计算机N台，再给出各台计算机间的连通情况:比如{2，3}表示计算机2和计算机3连通，给定这些条件下，任意输入两个1~n的数，输出这两台计算机是否连通(yes or no)</p></blockquote><p>​    这就可以使用并查集快速查找运算。这一类问题就可以归结为求无向图连通分支的问题。</p><h2 id="并查集的表示和主要操作"><a href="#并查集的表示和主要操作" class="headerlink" title="并查集的表示和主要操作"></a>并查集的表示和主要操作</h2><p>​    计算机中的集合一般使用树形结构表示，描述树形结构可以使用双亲表示法，这样用数组就可以存储所有结点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SetType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElementType data;<span class="comment">//节点数据</span></span><br><span class="line"><span class="keyword">int</span> parent;<span class="comment">//父亲结点数据</span></span><br><span class="line">&#125;Set[MAXSIZE];</span><br></pre></td></tr></table></figure><p>​    这样就可以很方便地描述一个集合(这里规定若一个结点是root，则parent域为1)</p><p>​    根据题目电脑连通，并查集的主要操作就是检查两台电脑是否同属一个集合和将两台电脑连通。这里定义两个函数<strong>Find</strong>和<strong>Union</strong>：</p><p><strong>Find</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找某个元素属于那个集合，返回集合根节点的下标</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(SetType S[], ElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXSIZE &amp;&amp; S[i].data != x; ++i);<span class="comment">//寻找该元素的过程</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; MAXSIZE) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//遍历所有集合，未找到该元素</span></span><br><span class="line"><span class="keyword">for</span> (; S[i].parent &gt;= <span class="number">0</span>; i = S[i].parent);<span class="comment">//找到该元素属于集合的根节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Union</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合的并运算,尽量把小的集合并入大的集合中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(SetType S[],ElementType x,ElementType y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rootX = Find(S, x);</span><br><span class="line"><span class="keyword">int</span> rootY = Find(S, y);</span><br><span class="line"><span class="keyword">if</span> (rootX!=<span class="number">-1</span> &amp;&amp; rootY!=<span class="number">-1</span>)<span class="comment">//两个集合均存在</span></span><br><span class="line">&#123;</span><br><span class="line">S[rootX].parent = S[rootY].parent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    一个并查集就完成了</p><a id="more"></a><h2 id="并查集的优化"><a href="#并查集的优化" class="headerlink" title="并查集的优化"></a>并查集的优化</h2><h3 id="1、表示的优化"><a href="#1、表示的优化" class="headerlink" title="1、表示的优化"></a>1、表示的优化</h3><p>​    有时候做题的时候数据量很小（数据量级&lt;10<sup>2</sup>）,定义结构体就显得没有必要，data域完全可以由数组下标表示，数组的值为原来的parent域，这样处理的结果是<strong>Find</strong>函数的遍历过程完全可以不写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXSIZE = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType; <span class="comment">//集合data类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SetName;<span class="comment">//集合的表示，以根节点下标表示</span></span><br><span class="line"><span class="keyword">typedef</span> ElementType SetType[MAXSIZE];</span><br></pre></td></tr></table></figure><h3 id="2、Find函数的优化-路径压缩"><a href="#2、Find函数的优化-路径压缩" class="headerlink" title="2、Find函数的优化(路径压缩)"></a>2、Find函数的优化(路径压缩)</h3><p>​    有时候我们需要频繁查找某个结点，若该结点处于集合的深处(叶子结点)，有时候是很耗时间的，聪明的数学家(或者计算机科学家)想出了这么个办法，将该结点到根结点路径上的parent域全指向root，路径压缩版的<strong>Find</strong>应运而生:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SetName <span class="title">Find_compress</span><span class="params">(SetType S,ElementType X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S[X] &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> X;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> S[X] = Find(S, S[X]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这段代码我那时候还真有点晕，后来画图才明白的，大概像下面这样：</p><img src="https://i.loli.net/2019/11/02/1hxbiE5lwozNf23.jpg" alt="路径压缩图解" style="zoom:67%;" /><p>​    当然，数据量大的时候才能凸显这个优化的优势，正常情况下和普通的Find函数并无区别</p><h3 id="3、Union函数的优化-按秩归并"><a href="#3、Union函数的优化-按秩归并" class="headerlink" title="3、Union函数的优化(按秩归并)"></a>3、Union函数的优化(按秩归并)</h3><p>​    有时候，集合归并时候我们尽量要让小集合归并到大集合上，保持树的高度不变，所以集合合并前需要先判断两个集合的情况，一种是按树的高度归并，一种是按集合的规模归并，两种标准都属于按秩归并。那么问题来了，高度（规模）保存在哪里呢，一种自然的想法是保存在root的parent域中(负数，方便处理)，下面给出实现:</p><p><strong>按高度</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union_height</span><span class="params">(SetType S, SetName Root1, SetName Root2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S[Root2]&lt;S[Root1])</span><br><span class="line">&#123;</span><br><span class="line">S[Root1] = Root2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (S[Root1]==S[Root2])</span><br><span class="line">S[Root1]--;</span><br><span class="line">S[Root2] = Root1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>按规模</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union_size</span><span class="params">(SetType S, SetName Root1, SetName Root2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S[Root2]&lt;S[Root1])</span><br><span class="line">&#123;</span><br><span class="line">S[Root2] += S[Root1];</span><br><span class="line">S[Root1] = Root2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">S[Root1] += S[Root2];</span><br><span class="line">S[Root2] = Root1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    两种方法并没有本质区别，唯一需要注意的就是逻辑和正数是相反的。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​    掌握了这些，电脑连通问题就可以轻易解决啦，今天又收获一次AC233~</p><p>​    当然这只是我的一些理解，有问题可以去github找我交流，顺便弱弱地求个star</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针传递和指针引用传递的区别</title>
      <link href="/2019/10/20/%E6%8C%87%E9%92%88%E4%BC%A0%E9%80%92%E5%92%8C%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/10/20/%E6%8C%87%E9%92%88%E4%BC%A0%E9%80%92%E5%92%8C%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    今天用c++写BST的insert插入方法后准备测试，准备了如下测试代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BSTree&lt;<span class="keyword">int</span>&gt; s(<span class="number">20</span>);</span><br><span class="line">s.insert(<span class="number">25</span>);</span><br><span class="line">s.insert(<span class="number">10</span>);</span><br><span class="line">s.insert(<span class="number">17</span>);</span><br><span class="line">s.insert(<span class="number">12</span>);</span><br><span class="line">s.insert(<span class="number">23</span>);</span><br><span class="line">s.insert(<span class="number">5</span>);</span><br><span class="line">s.insert(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><h4 id="预想中树的结构应该是这样的"><a href="#预想中树的结构应该是这样的" class="headerlink" title="预想中树的结构应该是这样的:"></a>预想中树的结构应该是这样的:</h4><pre><code>      20    /    \  10      25   /  \    /  \ 5   17  23     30    /   12</code></pre><h4 id="然而遍历以后的结果："><a href="#然而遍历以后的结果：" class="headerlink" title="然而遍历以后的结果："></a>然而遍历以后的结果：</h4><p><img src="https://i.loli.net/2019/11/02/pz8uHRlkeWc92nA.png" alt="二叉树遍历错误结果.png"></p><a id="more"></a><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><h4 id="经过debug后，问题出自这："><a href="#经过debug后，问题出自这：" class="headerlink" title="经过debug后，问题出自这："></a>经过debug后，问题出自这：</h4><p>​    参数列表的参数传递的不应该为指针，而应改为对指针的引用和二级指针</p><blockquote><p>指针传递参数本质上是值传递的方式，它所传递的是一个地址值。值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。（这里是在说实参指针本身的地址值不会变）</p><p>而在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址（int &amp;a的形式）。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p></blockquote><p>​    总结来说，要实现两个函数间的pass by reference，应该使用二级指针或者对指针的引用</p><p>按照资料的说明修改代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">BSTree</span>&lt;T&gt;:</span>:insert(<span class="keyword">const</span> T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> insert(x, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">BSTree</span>&lt;T&gt;:</span>:insert(<span class="keyword">const</span> T&amp; x, BSTNode&lt;T&gt;* &amp;current)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/02/pqPNKDT4ZQgt9Ed.png" alt="二叉树遍历正确结果.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;打个招呼吧&#39;</title>
      <link href="/2019/10/17/%E6%89%93%E4%B8%AA%E6%8B%9B%E5%91%BC%E5%90%A7/"/>
      <url>/2019/10/17/%E6%89%93%E4%B8%AA%E6%8B%9B%E5%91%BC%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎欢迎"><a href="#欢迎欢迎" class="headerlink" title="欢迎欢迎"></a>欢迎欢迎</h1><pre><code>没有心思学习（也许过了专注时期，晚上(摸鱼)搭个博客，之前用hexo搭博客失败了（哭，今天再搭一次试试，如果成功的话就能看到这篇博文辣</code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摸鱼 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
